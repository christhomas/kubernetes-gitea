apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.labels.app }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.labels.postgres }}
  serviceName: postgres
  replicas: 1
  volumeClaimTemplates:
    - metadata:
        name: postgres
        namespace: {{ .Values.namespace }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.volumes.postgres.size }}
        selector:
          matchLabels:
            volume-name: {{ .Values.volumes.postgres.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.labels.postgres }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{ .Values.nodeSelector.name }}: {{ .Values.nodeSelector.value | quote }}
      {{- end }}
      containers:
        - name: postgres
          image: {{ .Values.images.postgres }}
          imagePullPolicy: Always
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 30
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: postgres
            - secretRef:
                name: postgres
          ports:
            - containerPort: 5432
              name: postgres
              protocol: TCP
          volumeMounts:
            - name: postgres
              mountPath: /var/lib/postgresql
---

# -- Service for the Ingress to target
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.labels.app }}
spec:
  selector:
    app: {{ .Values.labels.postgres }}
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
